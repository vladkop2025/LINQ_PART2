using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace LINQ_PART2
{
    class Program
    {
        static void Main(string[] args)
        {
            /*Профессия C#-разработчик Язык C# Модуль 15.Основы LINQ.Часть 2 
            3/8   15.2. Агрегация

            Мы уже знаем, как выполнять операции с несколькими множествами, находить общие элементы, и т.д. Но и для действий с элементами внутри одной 
            коллекции LINQ предоставляет очень широкий набор инструментов.

            Довольно часто нам бывает необходимо собрать какую-то аналитику по нашим данным. К примеру, посчитать средний, максимальный и минимальный  возраст 
            студента курсов, пользователя сайта или мобильного приложения, покупателя товаров Интернет-магазина и так далее.

            Для выполнения этих и похожих задач с данными в арсенале LINQ существуют операции агрегации. Примеры таких операций: выборка (получение определенного 
            числа элементов), получение максимально и среднего значений в выборке, различные арифметические операции над значениями.

            *************************
            Aggregate() 
            *************************
 
            С помощью этого метода можно выполнить, к примеру, выполнение арифметического действия с элементами коллекции.

            Console.OutputEncoding = Encoding.UTF8;

            int[] numbers = { 1, 2, 3, 4, 5 };
            int result = numbers.Aggregate((x, y) => x - y);

            // вычислит 1-2-3-4-5 = -13
            Console.WriteLine(result);

            Ответ:  -13

            Другие арифметические действия также возможны: 

            int sum = numbers.Aggregate((x,y)=> x + y);

            *************************
            Count() 
            *************************
            
            Метод Count() можно использовать, когда вы хотите не просто посчитать элементы, а  узнать, сколько из них удовлетворяют определенным критериям.

            // получим тех кто младше 25
            var youngStudentsAmount =
               (from student in students
                where student.Age < 25
                select student).Count();

            // выведет 1
            Console.WriteLine(youngStudentsAmount);

            Но так, согласитесь, довольно громоздко и не очень удобно.

            Есть другой способ — использовать перегрузку метода Count(), принимающую на вход лямбда-выражение:

            // получим тех, кто младше 25
            var youngStudentsAmount = students.Count(s => s.Age < 25);

            // тоже выведет 1
            Console.WriteLine(youngStudentsAmount);

            Просто и изящно!

            *************************
            Sum()  
            *************************
            
            Ещё один удобный метод, название которого говорит само за себя.

            Пример использования будет очень похожим на предыдущий. 

            Простое сложение:

            
            var simpleNumbers = new[] { 3, 5, 7 };

            // Вернет 15
            Console.WriteLine(simpleNumbers.Sum());

            Сложный тип данных, сложение свойств:

            // Список студентов
            var students = new List<Student>
            {
              new Student {Name="Андрей", Age=23 },
              new Student {Name="Сергей", Age=27 },
              new Student {Name="Дмитрий", Age=29 }
            };

            // сумма возрастов всех студентов
            var totalAge = students.Sum(s => s.Age);

            // Вернет 79
            Console.WriteLine(totalAge);

            *************************
            Мax(), Min(), Average() 
            *************************

            Ещё один набор удобных методов, что они делают, понятно из названий. 

            Перейдём сразу к примерам: 

            var nums = new[] { 1, 7, 45, 23 };

            int greatest = nums.Max();  // наибольшее - 45
            int smallest = nums.Min();  // наименьшее - 1
            double average = nums.Average();  // среднее - 19

            Теперь посложнее: 

            var students = new List<Student>
            {
                 new Student {Name="Андрей", Age=23 },
                 new Student {Name="Сергей", Age=27 },
                 new Student {Name="Дмитрий", Age=29 }
            };

            // найдем возраст самого старого студента ( 29 )
            var oldest = students.Max(s => s.Age);

            // самого молодого ( 23 )
            var youngest = students.Min(s => s.Age);

            //  и средний возраст ( 26,3 )
            var average = students.Average(s => s.Age);

            */
        }

        // Класс Student, который нужно добавить
        class Student
        {
            public string Name { get; set; }
            public int Age { get; set; }
        }
    }    
}

/*
Задание 15.2.1
Факториал натурального числа n — это произведение всех натуральных целых чисел от 1 до n включительно

Шаблон функции факториала дан ниже:

static long Factorial(int number)
{
   // Ваш код здесь
  
   long result = //
   return result;
}

Допишите функцию, используя знания LINQ, полученные в этом юните.

static long Factorial(int number)
{
   // Коллекция для хранения чисел
   var numbers = new List<int>();
  
   // Добавляем все числа от 1 до n в коллекцию
   for (int i = 1; i <= number; i++)
       numbers.Add(i);
 
   // Выполняем агрегацию
   return numbers.Aggregate((x, y) => x * y);
}


Задание 15.2.2
Дан список контактов:

var contacts = new List<Contact>()
{
   new Contact() { Name = "Андрей", Phone = 79994500508 },
   new Contact() { Name = "Сергей", Phone = 799990455 },
   new Contact() { Name = "Иван", Phone = 79999675334 },
   new Contact() { Name = "Игорь", Phone = 8884994 },
   new Contact() { Name = "Анна", Phone = 665565656 },
   new Contact() { Name = "Василий", Phone = 3434 }
};

Посчитайте, у скольких из них неверные номера телефонов (верный телефон содержит 11 цифр и начинается с семёрки).

Ответ:

var invalidContacts =
   ( from contact in contacts // пробегаемся по контактам
       let phoneString = contact.Phone.ToString() // сохраняем в промежуточную переменную строку номера телефона
       where !phoneString.StartsWith('7') || phoneString.Length != 11 // выполняем выборку по условиям
       select contact) // добавляем объект в выборку
   .Count(); // считаем количество объектов в выборке


Задание 15.2.3
Напишите метод, возвращающий среднее арифметическое числовых объектов коллекции.

Шаблон метода дан ниже:

static double Average(int[] numbers)
{
   // Ваш код здесь
}

Ответ:

static double Average(int[] numbers)
{
   // если делить два целых числа, которые не делятся без остатка, при делении остаток будет отброшен
   // чтобы этого не случилось, нужно привести одно из чисел к типу double
   return numbers.Sum() / (double)numbers.Length;
}


Задание 15.2.4
Что называют агрегатными операциями?

арифметические и другие операции с элементами множества или коллекции   X
операции по преобразованию коллекции в другой тип
разбивка групп элементов по общему принципу
нет верного ответа

Ответ: да, для них используется метод расширения Aggregate().


Задание 15.2.5
Чем отличается свойство Count у List<T> и метод расширения Count в LINQ?

через свойство можно задать дополнительные критерии подсчёта
в метод можно передавать лямбда-выражение                                       X
нет принципиальных различий
через метод невозможно выполнить обычный подсчёт без дополнительных критериев

Ответ: одна из перегрузок метода Count() у List<T> позволяет передать на вход лямбда-выражение для уточнения критериев поиска.


Задание 15.2.6
Можно ли с помощью только метода-расширения Sum() найти сумму не всех элементов, а только тех, которые удовлетворяют определенным критериям (например, четных чисел)?

можно
нельзя                                              X
можно только в коллекциях, хранящих простые числа
можно в коллекциях, хранящих любые числа

Ответ: чтобы это сделать, сначала отфильтруйте коллекцию с помощью where, затем выполните суммирование.


Задание 15.2.7
Что выведёт данный код?

int [] nums = new[] { 2, 8, 11 };
int avg = nums.Average();
Console.WriteLine(avg);

7
2
11
нет верного ответа
нет ответа              X

Ответ: здесь нет верного ответа, так как на самом деле этот код не скомпилируется из-за неверно заданного типа переменной на второй строчке.


Задание 15.2.8
Напишите программу с бесконечным циклом, как в предыдущем юните, которая будет:

ожидать ввода числа с клавиатуры (используйте Console.ReadLine());
добавлять число в список, хранящийся в памяти;
выводить после добавления следующую информацию: количество чисел в списке, сумму всех чисел списка, наибольшее и наименьшее числа, а также их среднее значение.

class Program
{
   //   статическая переменная для хранения данных в памяти
   public static List<int> Numbers = new List<int>();
  
   static void Main(string[] args)
   {
       while (true)
       {
           // Читаем введенный с консоли  текст
           var input = Console.ReadLine();
          
           // проверяем, число ли это
           var isInteger = Int32.TryParse(input, out int inputNum);
          
           // если не число - показываем ошибку
           if (!isInteger)
           {
               Console.WriteLine();
               Console.WriteLine("Вы ввели не число");
           }
           // если соответствует, запускаем обработчик
           else
           {
               // добавляем в список
               Numbers.Add(inputNum); 
 
               // выводим все критерии
               Console.WriteLine("Число " +  input + " добавлено в список.");
               Console.WriteLine($&quot;Всего в списке  {Numbers.Count} чисел");
               Console.WriteLine($"Сумма:  {Numbers.Sum()}");
               Console.WriteLine($"Наибольшее:  {Numbers.Max()}");
               Console.WriteLine($"Наименьшее:  {Numbers.Min()}");               Console.WriteLine($"Среднее:  {Numbers.Average()}"); 
               Console.WriteLine();
           }
       }
   }
}
*/
